"""
Writer Agent - Report Generation

Role: Action Layer
Responsibility: Transforms synthesized knowledge into final deliverables

Educational Concept:
The Writer Agent represents the 'action' component of Agentic AI.
After perception (search) and cognition (planning, summarizing), the system
must take action - in this case, producing a comprehensive research report.
"""

from typing import Dict, Any, Optional
from datetime import datetime
try:
    from agents.config import config
except ImportError:
    config = None


class WriterAgent:
    """
    Generates structured research reports in Markdown format.
    
    Agentic AI Principle: Goal-Oriented Action
    - Transforms internal knowledge into external outputs
    - Formats information for human consumption
    - Maintains professional standards in deliverables
    """
    
    def __init__(self, knowledge_graph=None, use_llm=True):
        """
        Initialize the Writer Agent.
        
        Args:
            knowledge_graph: Reference to the knowledge graph for logging
            use_llm: Whether to use LLM for report generation (if available)
        """
        self.knowledge_graph = knowledge_graph
        self.name = "WriterAgent"
        self.use_llm = use_llm and config and config.enable_llm_writing
        self.llm_client = config.get_llm_client() if self.use_llm else None
    
    def write_report(self, query: str, summary: Dict[str, Any]) -> str:
        """
        Generate a comprehensive research report.
        
        Args:
            query: Original research query
            summary: Synthesized information from SummarizerAgent
            
        Returns:
            Markdown-formatted research report
            
        Educational Note:
        In production, this would use LLM-based generation (e.g., GroqCloud).
        The LLM would:
        - Structure information logically
        - Write in clear, professional prose
        - Add context and explanations
        - Format with proper headings, lists, and citations
        """
        self._log_action("writing_started", {
            "query": query,
            "using_llm": self.use_llm and self.llm_client is not None
        })
        
        if self.llm_client:
            report = self._generate_llm_report(query, summary)
        else:
            report = self._generate_markdown_report(query, summary)
        
        self._log_action("writing_completed", {
            "query": query,
            "report_length": len(report),
            "method": "llm" if self.llm_client else "template"
        })
        
        return report
    
    def _generate_markdown_report(self, query: str, summary: Dict[str, Any]) -> str:
        """
        Create structured Markdown report.
        
        Educational Note:
        This template-based approach demonstrates the structure.
        LLM-based generation would create more natural, context-aware content.
        """
        report_sections = []
        
        report_sections.append(f"# Research Report: {query}\n")
        report_sections.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        report_sections.append(f"**Sources Analyzed:** {summary.get('source_count', 0)}\n")
        report_sections.append("---\n")
        
        report_sections.append("## Executive Summary\n")
        report_sections.append(f"This report presents research findings on **{query}**. ")
        report_sections.append(f"Information was gathered from {summary.get('source_count', 0)} sources ")
        report_sections.append("and synthesized into key insights.\n")
        
        report_sections.append("## Key Findings\n")
        key_findings = summary.get("key_findings", [])
        if key_findings:
            for idx, finding in enumerate(key_findings[:8], 1):
                report_sections.append(f"\n### Finding {idx}: {finding.get('source', 'Unknown Source')}\n")
                report_sections.append(f"{finding.get('point', 'No information available')}\n")
                if finding.get('url'):
                    report_sections.append(f"\n*Source: [{finding.get('url')}]({finding.get('url')})*\n")
        else:
            report_sections.append("No key findings were extracted from the search results.\n")
        
        report_sections.append("## Sources\n")
        sources = summary.get("sources", [])
        if sources:
            for idx, source in enumerate(sources, 1):
                title = source.get('title', 'Unknown')
                url = source.get('url', '')
                report_sections.append(f"{idx}. [{title}]({url})\n")
        else:
            report_sections.append("No sources available.\n")
        
        report_sections.append("\n---\n")
        report_sections.append("*This report was generated by an Autonomous Research Agent for educational purposes.*\n")
        report_sections.append("*In production, this would use LLM-based generation (GroqCloud, GPT-4, etc.) for higher quality.*\n")
        
        return "".join(report_sections)
    
    def _generate_llm_report(self, query: str, summary: Dict[str, Any]) -> str:
        """
        Generate research report using LLM.
        
        Creates a comprehensive, well-structured report with:
        - Professional writing style
        - Clear organization and flow
        - Proper citations and attribution
        - Executive summary and conclusions
        """
        key_findings = summary.get("key_findings", [])
        source_count = summary.get("source_count", 0)
        llm_summary = summary.get("summary", "")
        themes = summary.get("themes", [])
        
        findings_text = "\n".join([
            f"- {f.get('point', 'N/A')} (Source: {f.get('source', 'Unknown')})"
            for f in key_findings[:10]
        ])
        
        prompt = f"""You are a professional research analyst writing a comprehensive research report.

Topic: {query}

Key Findings from {source_count} sources:
{findings_text}

Identified Themes: {', '.join(themes) if themes else 'N/A'}

Summary: {llm_summary if llm_summary else 'Generate based on findings'}

Write a comprehensive research report in Markdown format with:
1. Title and metadata
2. Executive Summary (2-3 paragraphs)
3. Key Findings section with detailed analysis
4. Trends and Patterns section
5. Conclusion and Implications
6. Sources section

Use professional language, proper Markdown formatting, and maintain factual accuracy with citations."""

        try:
            from langchain_core.messages import HumanMessage
            response = self.llm_client.invoke([HumanMessage(content=prompt)])
            
            llm_report = response.content
            
            sources = summary.get("sources", [])
            if sources:
                sources_section = "\n## Sources\n\n"
                for idx, source in enumerate(sources, 1):
                    title = source.get('title', 'Unknown')
                    url = source.get('url', '')
                    sources_section += f"{idx}. [{title}]({url})\n"
                
                if "## Sources" in llm_report:
                    llm_report = llm_report.split("## Sources")[0] + sources_section
                else:
                    llm_report += "\n\n" + sources_section
            
            footer = "\n\n---\n*This report was generated by an AI-powered Autonomous Research Agent.*\n"
            llm_report += footer
            
            return llm_report
            
        except Exception as e:
            print(f"LLM report generation failed: {e}. Falling back to template method.")
            return self._generate_markdown_report(query, summary)
    
    def _log_action(self, action: str, data: Dict[str, Any]):
        """Log writing actions to knowledge graph."""
        if self.knowledge_graph:
            self.knowledge_graph.log_agent_action(
                agent=self.name,
                action=action,
                data=data,
                timestamp=datetime.now().isoformat()
            )
